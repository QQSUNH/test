@color: #FF0000;
@hue : hue(@color);
@saturation: saturation(@color);
@lightness:lightness(@color);
div {height: 5px;}
@iterations:37;

.rainbow-loop(@i) when (@i>0)
{
    div:nth-child(@{i})
    {
        background: hsl(@hue+((@i)*10),@saturation,@lightness);
    }
    .rainbow-loop((@i)-1)
}
.rainbow-loop(@iterations);

/* // 색상 변수 선언
@color: #FF0000;

// 색상 변수로부터 hue 값을 추출하여 hue 변수에 저장
@hue : hue(@color);

// 색상 변수로부터 saturation 값을 추출하여 saturation 변수에 저장
@saturation: saturation(@color);

// 색상 변수로부터 lightness 값을 추출하여 lightness 변수에 저장
@lightness:lightness(@color);

// div 요소의 높이를 5px로 설정
div {height: 5px;}

// 반복문을 돌리기 위한 변수 선언
@iterations:37;

// 반복문 정의 및 재귀적으로 실행하는 믹스인 선언 .rainbow-loop 라는 mixin 정의, @i 변수가 0보다 클 때 실행
.rainbow-loop(@i) when (@i>0)
{
// i번째 div 요소에 배경색을 지정 div 태그 중 @i 번째 요소를 선택해서, 배경색을 hsl 형식으로 설정
div:nth-child(@{i})
{
background: hsl(@hue+((@i)*10),@saturation,@lightness);
}
// i값을 하나 감소시켜서 다음 div 요소에 배경색을 지정하도록 재귀적으로 실행
.rainbow-loop((@i)-1)
}

// 반복문 실행
.rainbow-loop(@iterations);

위 코드는 LESS(CSS 전처리기)로 작성된 코드입니다. 코드는 다음과 같은 역할을 합니다.

1. @color 변수를 선언하고, 이 변수에는 빨간색(#FF0000)이 할당됩니다.
2. @color 변수로부터 색상값(hue), 채도값(saturation), 명도값(lightness)을 추출하여 @hue, @saturation, @lightness 변수에 할당합니다.
3. div 요소의 높이를 5px로 설정합니다.
4. @iterations 변수를 선언하고, 이 변수에는 37이 할당됩니다.
5. .rainbow-loop 믹스인을 정의하고, @i가 0보다 큰 경우, @i번째 div 요소에 배경색을 지정하고 @i값을 하나 감소시켜서 재귀적으로 실행합니다. 이때, 배경색은 @hue+((@i)*10) 값으로 지정됩니다.
6. .rainbow-loop 믹스인에 @iterations 값을 인수로 전달하여 반복문을 실행합니다.*/